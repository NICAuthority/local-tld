#!/usr/bin/env node
var fs = require("fs");
var os = require("os");
var watch = require("watchfd").watch;
var http_proxy = require("http-proxy");
var dnsserver = require("dnsserver");


// start dns
// start httpd router
// restart httpd when config changes.

var config_file = process.env.HOME + "/.local-tld.json";
try {
  var config = JSON.parse(fs.readFileSync(config_file));
} catch(e) {
  config = {};
}

var DNS_PORT = 3333;
var HTTP_PORT = 5999;

start_dns();
var httpd = start_httpd();

watch(config_file, function(current, previous) {
  if(current.length == 0) {
    return;
  }
  try {
    config = JSON.parse(fs.readFileSync(config_file));
  } catch (e) {
    console.log("Parsing of config file %s failed:", config_file);
    console.log(e);
  }

  console.log("reloading proxy");
  httpd.close();
  console.log("closed");
  httpd = start_httpd();
  console.log("done");
});


// util

function get_local_ips()
{
  var ifconfig = os.networkInterfaces();
  var local_ips = [];
  var if_name;

  for(if_name in ifconfig) {
    if(if_name.substr(0, 2) != "en") {
      continue; // for other unixes learn other interface names
    }
    var _if = ifconfig[if_name];
    _if.forEach(function(address_info) {
      if(address_info.internal) {
        return; // no loopback!
      }

      if(address_info.family == 'IPv6') {
        return; // no
      }

      local_ips.push(address_info.address);

    });
  }
  return local_ips;
}

function start_httpd()
{
  function make_routes()
  {
    var routes = {};
    var local_ips = get_local_ips();
    // routes["localhost"] = "127.0.0.1:80";
    for(var port_m in config) {
      var domain = config[port_m].name;
      routes["localhost"] = "127.0.0.1:80";
      routes[domain + ".dev"] = "127.0.0.1:" + port_m;
      local_ips.forEach(function(local_ip) {
        routes[domain + "." + local_ip + ".xip.io"] = "127.0.0.1:" + port_m;
      });
      if(config[port_m].aliases) {
        var aliases = config[port_m].aliases;
        for(var alias in aliases) {
          routes[".*" + aliases[alias] + "." + domain + ".dev"] = "127.0.0.1:" + port_m;
          local_ips.forEach(function(local_ip) {
              routes[".*" + aliases[alias] + "." + domain + "." + local_ip + ".xip.io"] = "127.0.0.1:" + port_m;
          });
        }
      }
    }
    console.log(routes);
    return routes;
  }
  var routes = make_routes();
  var server = http_proxy.createServer({
    router: routes
  });

  server.on("listening", function() {
    console.log("httpd running");
  });
  server.listen(HTTP_PORT);
  return server;
}

function start_dns()
{
  var server = dnsserver.createServer();

  server.on("request", function(req, res) {
    var question = req.question;

    if (question.type == 1 && question.class == 1) {
      // IN A query
      res.addRR(question.name, 1, 1, 600, "127.0.0.1");
    } else {
      res.header.rcode = 3; // NXDOMAIN
    }

    res.send();
  });

  server.on("message", function(m) {
    // log(m);
  });

  server.on("error", function(e) {
    console.log(e);
  });

  server.on("listening", function() {
    console.log("DNS is a go");
  });
  server.bind(DNS_PORT, "127.0.0.1");
}
